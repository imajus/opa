---
description: Cursor rule for generating a task list from a PRD
globs:
alwaysApply: false
---

# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step‑by‑step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should lead a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1. **Receive PRD Reference:** The user points the AI to a specific PRD file.
2. **Analyse PRD:** Parse functional requirements, integration plans, and acceptance criteria.
3. **Phase 1 – Generate Parent Tasks:**

   - Derive the main high-level parent tasks covering all major work streams, including **programming**, **testing**, **documentation**, and **deployment / verification**. Use your judgement on how many high-level tasks to use. It's likely to be about 5.
   - Present the parent tasks to the user in the required format (no sub‑tasks yet).
   - End with: "I have generated the high‑level tasks based on the PRD. Ready to generate the sub‑tasks? Respond with 'Go' to proceed."

4. **Wait for Confirmation:** Pause until the user replies "Go".
5. **Phase 2 – Generate Sub‑Tasks:**

   - Break each parent task into atomic, actionable sub‑tasks.
   - Include tasks for:

     - **Programming** – SDK, framework or tooling setup, account configuration, contract writing & compilation, backend deployment, frontend development.
     - **Testing & Verification** – Unit/integration tests steps.
     - **Documentation & Demo** – Writing `README.md`, developer guide, demo script, and recording instructions for the video.
     - **Human‑in‑the‑Loop Tasks** – Where human steps are required, create sub‑tasks prefixed with **\[Human]**.

6. **Identify Relevant Files:** List potential code, contract, config, test, and documentation files under `## Relevant Files`, with brief descriptions.
7. **Generate Final Output:** Combine parent tasks, sub‑tasks, relevant files, and notes using the structure below.
8. **Save Task List:** Write the file to `/tasks/` with the correct filename.

## Output Format

The generated task list **must** follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.js` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/file1.test.js` - Unit tests for `file1.js`.
- `path/to/another/file.jsx` - Brief description (e.g., API route handler for data submission).
- `path/to/another/file.test.jsx` - Unit tests for `another/file.jsx`.
- `lib/utils/helpers.js` - Brief description (e.g., Utility functions needed for calculations).
- `lib/utils/helpers.test.js` - Unit tests for `helpers.js`.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```
