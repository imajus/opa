---
description: Cursor rule for generating a Product Requirements Document (PRD)
alwaysApply: false
---

# Rule: Generating a Product Requirements Document (PRD)

## Goal

To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1. **Receive Initial Prompt:** The user provides a concise description or request for a new feature or functionality.
2. **Ask Clarifying Questions:** Before writing the PRD, the AI _must_ ask clarifying questions to gather sufficient detail. The goal is to understand the _what_ and _why_ of the feature (not necessarily the _how_). Provide options as lettered or numbered lists so the user can respond easily.
3. **Generate PRD:** Based on the initial prompt and the user's answers, generate a PRD using the structure below.
4. **Save PRD:** Save the generated document as `prd-[feature-name].md` inside the `/tasks` directory.

## Clarifying Questions (Examples)

The AI should adapt its questions to the prompt, but consider exploring the following areas:

- **Problem / Goal:** "What problem does this feature solve for the user?" or "What is the main goal we want to achieve?"
- **Target User:** "Who is the primary user of this feature?"
- **Core Functionality:** "What key actions should the user be able to perform?"
- **User Stories:** "Could you provide a few user stories? (e.g., As a \[user type], I want to \[action] so that \[benefit].)"
- **SDK & Tooling:** "Which SDKs or framework(s) will you use (React, Tailwind, Next.js etc)?" or "Which Ethereum / JSON RPC Relay tooling will you use (ethers, hardhat, forge etc)?"
- **Acceptance Criteria:** "How will we know the feature is successfully implemented? What are the key success checks?"
- **Scope / Boundaries:** "Are there specific things this feature _should not_ do (non‑goals)?"
- **Data Requirements:** "What data must this feature display or manipulate?"
- **Design / UI:** "Are there mockups or UI guidelines to follow, or should we describe the desired look and feel?"
- **Edge Cases:** "What potential edge cases or error conditions should we consider?"

## PRD Structure

The generated PRD must include the following sections (use the same numbering):

1. **Introduction / Overview** – Summarise the feature and the problem it solves.
2. **Goals** – Specific, measurable objectives.
3. **User Stories** – Narratives describing how users benefit.
4. **Functional Requirements** – Numbered list of must‑have functionalities.
5. **SDK / Tooling** - State the chosen SDK, frameworks and key libraries.
6. **Non‑Goals (Out of Scope)** – Explicitly state what is _not_ included.
7. **Design Considerations (Optional)** – Links to mockups or UI/UX notes.
8. **Technical Considerations (Optional)** – Known constraints, dependencies, or recommendations.
9. **Success Metrics** – How success will be measured (e.g., user adoption, performance benchmarks).
10. **Optional / Stretch Goals** – Bonus‑point ideas not stricty required for the successful release.
11. **Open Questions** – Any unresolved issues or clarifications needed.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `prd-[feature-name].md`

## Final Instructions

1. **Do NOT start implementing the PRD.** Only generate the document after the clarifying questions are answered.
2. **Ask the user clarifying questions** before drafting the PRD.
3. **Incorporate the user's answers** into the final PRD and improve it accordingly.
